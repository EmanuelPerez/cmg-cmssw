#include "DataFormats/Common/interface/Wrapper.h"

#include "CMGTools/H2TauTau/interface/AbstractPhysicsObject.h"
#include "CMGTools/H2TauTau/interface/CompoundTypes.h"
#include "CMGTools/H2TauTau/interface/CompositePtrCandidateTMEt.h"
#include "CMGTools/H2TauTau/interface/CompositePtrCandidateT1T2MEt.h"
#include "CMGTools/H2TauTau/interface/Electron.h"
#include "CMGTools/H2TauTau/interface/Muon.h"
#include "CMGTools/H2TauTau/interface/Tau.h"
#include "CMGTools/H2TauTau/interface/GenericTypes.h"
#include "CMGTools/H2TauTau/interface/MultiObject.h"
#include "CMGTools/H2TauTau/interface/FatJet.h"
#include "CMGTools/H2TauTau/interface/BaseJet.h"
#include "CMGTools/H2TauTau/interface/PFJet.h"
#include "CMGTools/H2TauTau/interface/StructuredPFJet.h"
#include "CMGTools/H2TauTau/interface/PFJetComponent.h"
#include "CMGTools/H2TauTau/interface/BaseMET.h"
#include "CMGTools/H2TauTau/interface/TriBool.h"
#include "CMGTools/H2TauTau/interface/UnSet.h"
#include "CMGTools/H2TauTau/interface/TriggerObject.h"
#include "CMGTools/H2TauTau/interface/PatTypes.h"
#include "CMGTools/H2TauTau/interface/Hemisphere.h"
#include "CMGTools/H2TauTau/interface/Photon.h"
#include "CMGTools/H2TauTau/interface/NamedObject.h"
#include "CMGTools/H2TauTau/interface/METSignificance.h"
#include "CMGTools/H2TauTau/interface/Candidate.h"
#include "CMGTools/H2TauTau/interface/PackedCandidate.h"
#include "CMGTools/H2TauTau/interface/TriggerPrescaleList.h"
#include "DataFormats/VertexReco/interface/VertexFwd.h"
#include "DataFormats/Common/interface/ValueMap.h"

#include <vector>

#include <TMatrixD.h>

namespace {
  struct CMGTools_AnalysisDataFormats {

    cmg::METSignificance metsig_;
    edm::Wrapper<cmg::METSignificance> metsige_;
    std::vector<cmg::METSignificance> metsigv_;
    edm::Wrapper<std::vector<cmg::METSignificance> > metsigve_;

    TMatrixD  matrix_;
    edm::Wrapper<TMatrixD> matrixe_;

    cmg::AbstractPhysicsObject a_;
    std::vector<cmg::AbstractPhysicsObject> av;
    edm::Wrapper<cmg::AbstractPhysicsObject> ae;
    edm::Wrapper<std::vector<cmg::AbstractPhysicsObject> > aev;
    
    cmg::NamedObject no_;
    std::vector<cmg::NamedObject> nov;
    edm::Wrapper<cmg::NamedObject> noe;
    edm::Wrapper<std::vector<cmg::NamedObject> > nowv;

    cmg::DiElectron de_;
    std::vector<cmg::DiElectron> dev;
    edm::Wrapper<cmg::DiElectron> ede;
    edm::Wrapper<std::vector<cmg::DiElectron> > edev;

    cmg::DiMuon d_;
    std::vector<cmg::DiMuon> dv;
    edm::Wrapper<cmg::DiMuon> ed;
    edm::Wrapper<std::vector<cmg::DiMuon> > edv;

    cmg::DiTau dt_;
    std::vector<cmg::DiTau> dtv;
    edm::Wrapper<cmg::DiTau> edt;
    edm::Wrapper<std::vector<cmg::DiTau> > edtv;

    cmg::DiTauDiObject dtdiobj_;
    std::vector<cmg::DiTauDiObject> dtdiobjv;
    edm::Wrapper<cmg::DiTauDiObject> edtdiobj;
    edm::Wrapper<std::vector<cmg::DiTauDiObject> > edtdiobjv;

    cmg::Electron e_;
    std::vector<cmg::Electron> ev;
    edm::Wrapper<cmg::Electron> ee;
    edm::Wrapper<std::vector<cmg::Electron> > eev;

    cmg::Muon m_;
    edm::Ptr< cmg::Muon > mp;
    std::vector<cmg::Muon> mv;
    edm::Wrapper<cmg::Muon> em;
    edm::Wrapper<std::vector<cmg::Muon> > emv;

    cmg::SimpleParticle sp;
    std::vector<cmg::SimpleParticle> spv;    
    edm::Wrapper<cmg::SimpleParticle> wsp;
    edm::Wrapper<std::vector<cmg::SimpleParticle> > wvsp;

    cmg::Candidate cc;
    std::vector<cmg::Candidate> ccv;    
    edm::Wrapper<cmg::Candidate> wcc;
    edm::Wrapper<std::vector<cmg::Candidate> > wvcc;
    cmg::PackedCandidate pcc;
    std::vector<cmg::PackedCandidate> pccv;    
    edm::Wrapper<cmg::PackedCandidate> pwcc;
    edm::Wrapper<std::vector<cmg::PackedCandidate> > pwvcc;
 
    
    cmg::Tau t;
    std::vector<cmg::Tau> tv;
    edm::Wrapper<cmg::Tau> et;
    edm::Wrapper<std::vector<cmg::Tau> > etv;

    cmg::BaseJet j_;
    std::vector<cmg::BaseJet> jv;
    edm::Wrapper<cmg::BaseJet> ej;
    edm::Wrapper<std::vector<cmg::BaseJet> > ejv;

    cmg::PFJet pfj_;
    std::vector<cmg::PFJet> pfjv;
    edm::Wrapper<cmg::PFJet> epfj;
    edm::Wrapper<std::vector<cmg::PFJet> > epfjv;
    boost::array<int,10> intarray5;
    boost::array<float,10> floatarray5;
    boost::array<std::string,10> stringarray5;

    cmg::PFJetComponent  jetComp_;
    std::vector< cmg::PFJetComponent > vJetComps_;

    cmg::BaseMET met_;
    std::vector<cmg::BaseMET> metv_;
    edm::Wrapper<cmg::BaseMET> wmet_;
    edm::Wrapper<std::vector<cmg::BaseMET> > wmetv_;

    static const cmg::TriBool u_ = cmg::tbUnset;
    static const cmg::TriBool f_ = cmg::tbFalse;
    static const cmg::TriBool t_ = cmg::tbTrue;

    cmg::PFCandidate pfcand_;
    std::vector<cmg::PFCandidate> pfcandv_;
    edm::Wrapper<cmg::PFCandidate> wpfcand_;
    edm::Wrapper<std::vector<cmg::PFCandidate> > wpfcandv_;

    cmg::GenParticle genpart_;
    std::vector<cmg::GenParticle> genpartv_;
    edm::Wrapper<cmg::GenParticle> wgenpart_;
    edm::Wrapper<std::vector<cmg::GenParticle> > wgenpartv_;

    cmg::GenJet genjet_;
    std::vector<cmg::GenJet> genjetv_;
    edm::Wrapper<cmg::GenJet> wgenjet_;
    edm::Wrapper<std::vector<cmg::GenJet> > wgenjetv_;

    cmg::MultiObject mp_;
    std::vector<cmg::MultiObject> vmp_;
    edm::Wrapper<cmg::MultiObject> wmp_;
    edm::Wrapper<std::vector<cmg::MultiObject> > wvmp_;

    /// create dictionaries for the composite objects from PFAnalysis
    PATMuPair dummyPATMuPair_;
    std::vector<PATMuPair> dummyPATMuPairVector_;
    edm::Wrapper<PATMuPair> dummyPATMuPairWrapper_;
    edm::Wrapper<std::vector<PATMuPair> > dummyPATMuPairVectorWrapper_;
    
    PATMuonNuPair dummyPATMuNuPair_;
    std::vector<PATMuonNuPair> dummyPATMuNuPairVector_;
    edm::Wrapper<PATMuonNuPair> dummyPATMuNuPairWrapper_;
    edm::Wrapper<std::vector<PATMuonNuPair> > dummyPATMuNuPairVectorWrapper_;
    

    //for Tau-Tau
    cmg::TauEle taue;
    std::vector<cmg::TauEle> taue_;
    edm::Wrapper<cmg::TauEle> wtaue_;
    edm::Wrapper<std::vector<cmg::TauEle> > wtauev_;


    cmg::TauEleDiObject tauelediobj;
    std::vector<cmg::TauEleDiObject> tauelediobj_;
    edm::Wrapper<cmg::TauEleDiObject> wtauelediobj_;
    edm::Wrapper<std::vector<cmg::TauEleDiObject> > wtauelediobjv_;

    cmg::TauMu taumu;
    std::vector<cmg::TauMu> taumu_;
    edm::Wrapper<cmg::TauMu> wtaumu_;
    edm::Wrapper<std::vector<cmg::TauMu> > wtaumuv_;

    cmg::TauMuDiObject taumudiobj;
    std::vector<cmg::TauMuDiObject> taumudiobj_;
    edm::Wrapper<cmg::TauMuDiObject> wtaumudiobj_;
    edm::Wrapper<std::vector<cmg::TauMuDiObject> > wtaumudiobjv_;

    cmg::MuEle mue;
    std::vector<cmg::MuEle> mue_;
    edm::Wrapper<cmg::MuEle> wmue_;
    edm::Wrapper<std::vector<cmg::MuEle> > wmuev_;

    cmg::MuEleDiTau muediobj;
    std::vector<cmg::MuEleDiTau> mueiobj_;
    edm::Wrapper<cmg::MuEleDiTau> wmueiobj_;
    edm::Wrapper<std::vector<cmg::MuEleDiTau> > wmueiobjv_;

    // Correspondence between PFCandidates and Primary Vertices
    std::vector<reco::Vertex> vtxvec_;
    std::vector<edm::Ref<std::vector<reco::Vertex>,reco::Vertex,edm::refhelper::FindUsingAdvance<std::vector<reco::Vertex>,reco::Vertex> > > vtxrefvec_;
    edm::ValueMap<edm::Ref<std::vector<reco::Vertex>,reco::Vertex,edm::refhelper::FindUsingAdvance<std::vector<reco::Vertex>,reco::Vertex> > > vtxvmap_;
    edm::Wrapper<edm::ValueMap<edm::Ref<std::vector<reco::Vertex>,reco::Vertex,edm::refhelper::FindUsingAdvance<std::vector<reco::Vertex>,reco::Vertex> > > > vtxvmapw_;
    reco::VertexRefVector vtxrefvec2_;
    edm::ValueMap<reco::VertexRefVector> vtxvmap2_;
    edm::Wrapper<edm::ValueMap<reco::VertexRefVector> > vtxvmapw2_;

  };
  

}
